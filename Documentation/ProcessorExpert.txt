=============================================================================
List of generated methods in project: ProcessorExpert

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "LED1"      (component BitIO)
   - LED1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "LED2"      (component BitIO)
   - LED2_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "SWITCH"    (component MultiBitIO)
   - SWITCH_GetVal -Returns the value of the Input/Output component. Component calls ancestor's [GetVal] for each bit and 
                composes value according its order. That is [direction] independent, for details look into ancestor 
                documentation.
   - SWITCH_GetBit -Returns the value of the specified bit/pin of the Input/Output component. For specified bit is called 
                ancestor's [GetVal] method. That is [direction] independent, for details look into ancestor documentation. Pins 
                are addressed form zero, where 0 is equaled to LSB. In case incorrept pin number value is used method returns 0.

Module "KEY"       (component MultiBitIO)
   - KEY_GetVal -Returns the value of the Input/Output component. Component calls ancestor's [GetVal] for each bit and composes 
                value according its order. That is [direction] independent, for details look into ancestor documentation.
   - KEY_GetBit -Returns the value of the specified bit/pin of the Input/Output component. For specified bit is called 
                ancestor's [GetVal] method. That is [direction] independent, for details look into ancestor documentation. Pins 
                are addressed form zero, where 0 is equaled to LSB. In case incorrept pin number value is used method returns 0.

Module "SCI"       (component AsynchroSerial)
   - SCI_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read. [ Version specific 
                information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on the selected CPU 
                and the receiver is configured to use DMA controller then this method only sets the selected DMA channel. Then 
                the status of the DMA transfer can be checked using GetCharsInRxBuf method. See an example of a typical usage 
                for details about the communication using DMA.
   - SCI_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.  [ Version specific information for Freescale 56800 
                derivatives ]   DMA mode:  If DMA controller is available on the selected CPU and the transmitter is configured 
                to use DMA controller then this method only sets selected DMA channel. Then the status of the DMA transfer can 
                be checked using GetCharsInTxBuf method. See an example of a typical usage for details about communication 
                using DMA.

Module "HMI_OLED"  (component BitsIO)
   - HMI_OLED_PutBit -Specified value is passed to the specified bit/pin of the Input/Output component. If the direction is 
                [input] it saves the value to a memory or register, this value will be written to the pin after switching to 
                the output mode - using [SetDir(TRUE)] (see <Safe mode> property for limitations). If the direction is [output] 
                it writes the value to the pin. (Method is available only if the Direction = _[output]_ or _[input/output]_).

Module "TMR"       (component TimerInt)

Module "LEFTPA"    (component PulseAccumulator)
   - LEFTPA_GetCounterValue -This method returns the content of the pulse accumulator counter.

Module "RIGHTPA"   (component PulseAccumulator)
   - RIGHTPA_GetCounterValue -This method returns the content of the pulse accumulator counter.

Module "DRV_MEN"   (component BitIO)
   - DRV_MEN_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).

Module "SERVO1"    (component PWM)
   - SERVO1_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "HS"        (component ExtInt)
   - HS_Enable -Enable the component - the external events are accepted. This method is available only if HW module allows 
                enable/disable of the interrupt.
   - HS_Disable -Disable the component - the external events are not accepted. This method is available only if HW module 
                allows enable/disable of the interrupt.

Module "VS"        (component ExtInt)
   - VS_Enable -Enable the component - the external events are accepted. This method is available only if HW module allows 
                enable/disable of the interrupt.

Module "DMA_12"    (component DMAChannel)
   - DMA_12_SetDestinationAddress -Specifies address of the destination buffer for DMA transfer.
   - DMA_12_SetDataSize -Specifies the DMA data size - number of data to be transferred.
   - DMA_12_Start -Starts DMA transfer. If Peripheral mapping is used this method enables peripheral requests and transfer 
                starts after peripheral request is asserted.
   - DMA_12_Stop -Aborts DMA transfer. If Peripheral mapping is used this method also disables peripheral requests.

Module "SERVO2"    (component PWM)
   - SERVO2_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 
                16-bit unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "Cpu"       (component MC56F84786VLK)
   - Cpu_EnableInt -Enables all maskable interrupts
   - Cpu_DisableInt -Disables all maskable interrupts
   - Cpu_SetWaitMode -Sets low power mode - Wait mode.   For more information about the wait mode see this CPU documentation.   
                Release from wait mode: Reset or interrupt
   - Cpu_SetStopMode -Sets low power mode - Stop mode.   For more information about the stop mode see this CPU documentation.
   - Cpu_Delay100US -This method realizes software delay. The length of delay is at least 100 microsecond multiply input 
                parameter [us100]. As the delay implementation is not based on real clock, the delay time may be increased by 
                interrupt service routines processed during the delay. Adding read wait states for external program memory can 
                cause delay extension as well. The method is independent on selected speed mode.

===================================================================================
