/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : DMA_12.h
**     Project     : ProcessorExpert
**     Processor   : MC56F84786VLK
**     Component   : DMAChannel
**     Version     : Component 01.069, Driver 01.10, CPU db: 3.50.001
**     Compiler    : CodeWarrior DSP C Compiler
**     Date/Time   : 2015-01-30, 18:37, # CodeGen: 149
**     Abstract    :
**         This bean "DMAChannel" implements DMA channel.

**     Settings    :
**         DMA channel                 : DMA_Channel0
**
**         DMA interrupt
**             Vector name             : INT_DMA0
**             Interrupt priority      : 2
**
**         Source address              : (unsigned long)((unsigned char*)&ADC12_RSLT0+1)
**         Destination address         : (unsigned long)g_nCamFrameBuffer
**
**         Block length                : IMG_COLS
**
**     Contents    :
**         SetDestinationAddress - void DMA_12_SetDestinationAddress(void* addr);
**         SetDataSize           - byte DMA_12_SetDataSize(word size);
**         Start                 - void DMA_12_Start(void);
**         Stop                  - void DMA_12_Stop(void);
**
**     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file DMA_12.h
** @version 01.10
** @brief
**         This bean "DMAChannel" implements DMA channel.

*/         
/*!
**  @addtogroup DMA_12_module DMA_12 module documentation
**  @{
*/         

#ifndef __DMA_12
#define __DMA_12

/* MODULE DMA_12. */

/* Pointer increment constants */
#ifndef DMA_DONT_CHANGE_POINTER
  #define DMA_DONT_CHANGE_POINTER    0U
#endif
#ifndef DMA_INC_POINTER
  #define DMA_INC_POINTER            2U
#endif
#ifndef DMA_DEC_POINTER
  #define DMA_DEC_POINTER            3U
#endif

/* Status bits constants */
/* DMA channel is disabled (not active) */
#ifndef DMA_DISABLED
  #define DMA_DISABLED               0x00U
#endif
/* DMA channel is enabled (active) */
#ifndef DMA_ENABLED
  #define DMA_ENABLED                0x01U
#endif
/* Configuration error */
#ifndef DMA_CONFIG_ERR
  #define DMA_CONFIG_ERR             0x40U
#endif
/* Bus error on source */
#ifndef DMA_BUS_SOURCE_ERR
  #define DMA_BUS_SOURCE_ERR         0x20U
#endif
/* Bus error on destination */
#ifndef DMA_BUS_DESTINATION_ERR
  #define DMA_BUS_DESTINATION_ERR    0x10U
#endif
/* DMA request is pending */
#ifndef DMA_REQUEST_PENDING
  #define DMA_REQUEST_PENDING        0x04U
#endif
/* DMA channel transfer is active */
#ifndef DMA_BUSY
  #define DMA_BUSY                   0x02U
#endif
/* DMA channel transfer completed (with or without error) */
#ifndef DMA_DONE
  #define DMA_DONE                   0x01U
#endif

/* Transfer width constants */
#ifndef DMA_TRANSFER_8_BIT
  #define DMA_TRANSFER_8_BIT         1U
#endif
#ifndef DMA_TRANSFER_16_BIT
  #define DMA_TRANSFER_16_BIT        2U
#endif
#ifndef DMA_TRANSFER_32_BIT
  #define DMA_TRANSFER_32_BIT        0U
#endif

/* Circular buffer macro transforming power of two form to register value form
   (applicable only for integer values greater than 3) */
#define SET_BUFFER_POWER_OF_2_FORM(size) (size - 3U)
/* Circular buffer macro transforming register value form to power of two form
   (applicable only for integer values greater than 0) */
#define GET_BUFFER_POWER_OF_2_FORM(size) (size + 3U)

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "PE_Timer.h"

#include "Cpu.h"




#define DMA_12_SetDestinationAddress(addr) (setReg32(DMA_DAR0, addr))
/*
** ===================================================================
**     Method      :  DMA_12_SetDestinationAddress (component DMAChannel)
**     Description :
**         Specifies address of the destination buffer for DMA transfer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * addr            - Pointer to the destination buffer for
**                           DMA transfer.
**     Returns     : Nothing
** ===================================================================
*/

#define DMA_12_SetDataSize(size) (setReg32BitGroupVal(DMA_DSR_BCR0, BCR, size), (byte)ERR_OK)
/*
** ===================================================================
**     Method      :  DMA_12_SetDataSize (component DMAChannel)
**     Description :
**         Specifies the DMA data size - number of data to be
**         transferred.
**     Parameters  :
**         NAME            - DESCRIPTION
**         size            - Number of bytes to be transferred.
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

#define DMA_12_Start() do {setReg32Bit(DMA_DCR0, ERQ);} while(0)
/*
** ===================================================================
**     Method      :  DMA_12_Start (component DMAChannel)
**     Description :
**         Starts DMA transfer. If Peripheral mapping is used this
**         method enables peripheral requests and transfer starts after
**         peripheral request is asserted.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define DMA_12_Stop() do {clrReg32Bit(DMA_DCR0, ERQ); setReg32Bit(DMA_DSR_BCR0, DONE);} while(0)
/*
** ===================================================================
**     Method      :  DMA_12_Stop (component DMAChannel)
**     Description :
**         Aborts DMA transfer. If Peripheral mapping is used this
**         method also disables peripheral requests.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void DMA_12_Interrupt(void);
/*
** ===================================================================
**     Method      :  DMA_12_Interrupt (component DMAChannel)
**
**     Description :
**         The method services the transfer complete interrupt of the 
**         selected peripheral(s) and eventually invokes the components 
**         event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void DMA_12_Init(void);
/*
** ===================================================================
**     Method      :  DMA_12_Init (component DMAChannel)
**
**     Description :
**         Initializes the associated peripheral(s) and the components 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

/* END DMA_12. */

#endif /* ifndef __DMA_12 */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale 56800 series of microcontrollers.
**
** ###################################################################
*/
